---
layout: post
title:  "Selenium"
date:   2018-03-02 08:43:59
author: kim-jaehun
categories: Selenium
tags: crawler
---

### Selenium이란?


Selenium은 주로 웹앱을 테스트하는데 이용하는 프레임워크다. webdriver라는 API를 통해 운영체제에 설치된 Chrome등의 브라우저를 제어하게 된다.

브라우저를 직접 동작시킨다는 것은 JavaScript를 이용해 비동기적으로 혹은 뒤늦게 불러와지는 컨텐츠들을 가져올 수 있다는 것이다. 즉, ‘눈에 보이는’ 컨텐츠라면 모두 가져올 수 있다는 뜻이다. 우리가 requests에서 사용했던 .text의 경우 브라우저에서 ‘소스보기’를 한 것과 같이 동작하여, JS등을 통해 동적으로 DOM이 변화한 이후의 HTML을 보여주지 않는다. 반면 Selenium은 실제 웹 브라우저가 동작하기 때문에 JS로 렌더링이 완료된 후의 DOM결과물에 접근이 가능하다.


####webdriver
Selenium은 webdriver라는 것을 통해 디바이스에 설치된 브라우저들을 제어할 수 있다
####PhantomJS webdriver
PhantomJS는 기본적으로 WebTesting을 위해 나온 Headless Browser다.(즉, 화면이 존재하지 않는다)


``` python
from selenium import webdriver

driver = webdriver.Firefox()
# driver = webdriver.PhantomJS() #브라우저 실행 없이
driver.get('http://google.com/')
print(driver.page_source)
driver.quit())
```
<br><br><br>
####WebDriver에서의 ip 우회(tor 이용 port:9050)

``` python
$ netstat -ntlp
Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      -
tcp        0      0 127.0.0.1:9050          0.0.0.0:*               LISTEN      -
tcp6       0      0 :::22                   :::*                    LISTEN      -
```
9050 포트에 SOCKS 리스너가 만들어진 것을 확인

``` python
from selenium import webdriver

profile = webdriver.FirefoxProfile()
profile.set_preference("network.proxy.type", 1)
profile.set_preference("network.proxy.socks", "127.0.0.1")
profile.set_preference("network.proxy.socks_port", 9050)
profile.update_preferences()
driver = webdriver.Firefox(profile)
driver.get('http://google.com')
print(driver.page_source)
driver.quit()
```
<br><br><br>

#### RemoteWebDriver에서의 ip 우회
```
```

#### 참고문헌


* https://beomi.github.io/2017/02/27/HowToMakeWebCrawler-With-Selenium/
